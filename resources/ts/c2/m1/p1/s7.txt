WEBVTT

1
00:00:07.390 --> 00:00:10.050
Hello and welcome back.

2
00:00:10.050 --> 00:00:11.490
In this video, we'll do

3
00:00:11.490 --> 00:00:14.090
the following:
interact with agents,

4
00:00:14.090 --> 00:00:16.695
explore how to
provide context to

5
00:00:16.695 --> 00:00:20.230
Copilot and use pre
baked/commands.

6
00:00:20.230 --> 00:00:21.810
Before we get started,

7
00:00:21.810 --> 00:00:24.150
let's install the
Python extension.

8
00:00:24.150 --> 00:00:26.150
If you haven't done so, click on

9
00:00:26.150 --> 00:00:29.410
the extension icon on
the left hand side bar.

10
00:00:29.410 --> 00:00:32.210
Find Python. Be sure,

11
00:00:32.210 --> 00:00:35.510
it's from Microsoft.
And click Install.

12
00:00:35.510 --> 00:00:38.590
Now if you clone the
Github repository

13
00:00:38.590 --> 00:00:41.650
for this lesson and you
want to follow along,

14
00:00:41.650 --> 00:00:44.130
click on the Explorer panel.

15
00:00:44.130 --> 00:00:46.310
Select folder, lesson one.

16
00:00:46.310 --> 00:00:49.150
Now select video three.

17
00:00:49.460 --> 00:00:54.140
Let's open the Python files,
addition and subtraction.

18
00:00:54.140 --> 00:00:57.440
Let's click on the icon
for splitting window.

19
00:00:57.440 --> 00:01:01.200
Close the subtraction
tab on the left side.

20
00:01:01.280 --> 00:01:04.060
Now let's open the
chat window by

21
00:01:04.060 --> 00:01:07.240
clicking on the chat
icon on the left side.

22
00:01:08.370 --> 00:01:10.930
Starting on November 30,

23
00:01:10.930 --> 00:01:13.850
2023, Github introduced
Copilot agents.

24
00:01:13.850 --> 00:01:15.250
To access those agents,

25
00:01:15.250 --> 00:01:18.570
you can type the ad
symbol at the chat input.

26
00:01:18.570 --> 00:01:21.610
Let's start with the
ad workspace agent,

27
00:01:21.610 --> 00:01:25.730
which helps you interact
with your overall workspace.

28
00:01:26.330 --> 00:01:29.950
To make this clear,
I'll type two prompts.

29
00:01:29.950 --> 00:01:33.450
First, let's delete
the ad workspace.

30
00:01:33.620 --> 00:01:38.030
We're going to ask what's my
current folder structure?

31
00:01:38.030 --> 00:01:40.180
As you can see, it
mentions that it

32
00:01:40.180 --> 00:01:42.500
doesn't have access
to my file system.

33
00:01:42.500 --> 00:01:45.320
Let's go ahead and
exclude the last message.

34
00:01:45.320 --> 00:01:47.520
Now we're going to ask
the question again,

35
00:01:47.520 --> 00:01:50.480
but this time we'll
use at work space,

36
00:01:50.480 --> 00:01:56.720
I'll type what's my current
folder structure, hit Enter.

37
00:01:56.720 --> 00:02:00.720
As you can see, it's reading
metadata about my workspace.

38
00:02:00.720 --> 00:02:03.580
The answer is much better and is

39
00:02:03.580 --> 00:02:06.380
able to see my
entire folder tree.

40
00:02:06.380 --> 00:02:09.900
This is useful for
a myriad of things.

41
00:02:10.260 --> 00:02:14.420
Let's go ahead and
exclude the last message.

42
00:02:14.460 --> 00:02:17.120
Let me give you another example.

43
00:02:17.120 --> 00:02:18.920
Let's say you wanted suggestions

44
00:02:18.920 --> 00:02:20.680
for a better folder structure.

45
00:02:20.680 --> 00:02:22.520
You can type at work space,

46
00:02:22.520 --> 00:02:24.940
suggest a better
folder structure

47
00:02:24.940 --> 00:02:28.390
for less than one, video three.

48
00:02:29.620 --> 00:02:31.940
It's going to read the Meta data

49
00:02:31.940 --> 00:02:37.780
again and give you
a nice alternative.

50
00:02:37.780 --> 00:02:39.260
I can't stress enough that

51
00:02:39.260 --> 00:02:41.140
a good folder
structure is going to

52
00:02:41.140 --> 00:02:44.040
help you find files easier.

53
00:02:44.040 --> 00:02:47.745
There's another agent
called @vscode.

54
00:02:47.745 --> 00:02:51.300
This agent takes context
from VScode documentation.

55
00:02:51.300 --> 00:02:53.970
For example, you
can type @vscode,

56
00:02:53.970 --> 00:02:56.845
what's the shortcut
to open a file?

57
00:02:56.845 --> 00:03:00.820
This agent will comprehend
what you're trying to achieve,

58
00:03:00.820 --> 00:03:04.380
look up in the
documentation for VS code

59
00:03:04.380 --> 00:03:08.130
and give you the shortcut
based on your current OS.

60
00:03:08.130 --> 00:03:09.800
As you can see here,

61
00:03:09.800 --> 00:03:12.340
mine is command B.

62
00:03:13.360 --> 00:03:15.660
Now let's try another one,

63
00:03:15.660 --> 00:03:17.240
the @terminal, which helps

64
00:03:17.240 --> 00:03:19.480
you with terminal
related questions.

65
00:03:19.480 --> 00:03:25.060
I can type, how do I
run a Python file?

66
00:03:26.600 --> 00:03:30.390
It gave me a command
to run my Python file,

67
00:03:30.390 --> 00:03:32.230
which I can click on
the terminal icon,

68
00:03:32.230 --> 00:03:33.600
which is the third icon.

69
00:03:33.600 --> 00:03:37.030
It'll open the terminal
with the command one.

70
00:03:37.030 --> 00:03:38.850
Let's click on the plus

71
00:03:38.850 --> 00:03:42.490
sign up top to clear
the chat content.

72
00:03:42.490 --> 00:03:45.690
Now I'll show you
the hash command,

73
00:03:45.690 --> 00:03:48.040
which is for context.

74
00:03:48.040 --> 00:03:51.250
I can type #editor,
and as you can see,

75
00:03:51.250 --> 00:03:54.590
has editor will take the
active files context.

76
00:03:54.590 --> 00:03:57.610
Now let's try and
underline The hash file

77
00:03:57.610 --> 00:04:00.970
will allow me to select
a file from my project.

78
00:04:00.970 --> 00:04:02.810
If I hit Enter, I
should be able to

79
00:04:02.810 --> 00:04:04.850
see a dialogue
containing files that I

80
00:04:04.850 --> 00:04:08.950
can choose from.
The hash selection.

81
00:04:08.950 --> 00:04:10.770
Whatever text I have selected in

82
00:04:10.770 --> 00:04:12.590
my active editor will be taken

83
00:04:12.590 --> 00:04:15.605
into context in my chat message.

84
00:04:15.605 --> 00:04:19.770
Now the other one, the
terminal last command hash

85
00:04:19.770 --> 00:04:21.950
is for whatever
command I use last.

86
00:04:21.950 --> 00:04:24.470
The terminal selection is for

87
00:04:24.470 --> 00:04:28.350
whatever text is selected
in my terminal window.

88
00:04:30.390 --> 00:04:34.015
Another helpful feature
is the slash command.

89
00:04:34.015 --> 00:04:36.610
Slash commands are
pre packed prompts.

90
00:04:36.610 --> 00:04:41.670
For example, if I type
forward slash explain,

91
00:04:42.880 --> 00:04:47.140
it'll take the workspace
into context and

92
00:04:47.140 --> 00:04:51.480
explain either the selected
code or the active file.

93
00:04:51.480 --> 00:04:54.580
Another useful command is
the forward slash fix,

94
00:04:54.580 --> 00:04:56.760
which will take whatever
file is active in

95
00:04:56.760 --> 00:05:00.560
the editor and then
find and fix issues.

96
00:05:00.560 --> 00:05:03.860
Another useful command is
the forward slash new.

97
00:05:03.860 --> 00:05:07.860
This will create a new
workspace based on your input.

98
00:05:07.860 --> 00:05:10.200
Let's say for example,
you wanted to create

99
00:05:10.200 --> 00:05:13.740
a microservice based on
addition and subtraction files.

100
00:05:13.740 --> 00:05:16.220
You could type a workspace

101
00:05:16.220 --> 00:05:20.000
new a Python microservice

102
00:05:21.260 --> 00:05:23.420
for the addition and

103
00:05:23.420 --> 00:05:27.580
subtraction files in
Lesson 1, video 3.

104
00:05:29.570 --> 00:05:34.500
Hit Enter and wait for it to
generate the new workspace.

105
00:05:35.100 --> 00:05:37.620
As you can see, it generated

106
00:05:37.620 --> 00:05:39.580
an entirely new folder structure

107
00:05:39.580 --> 00:05:42.000
along with the
files and content.

108
00:05:42.000 --> 00:05:43.860
If you want to, you can preview

109
00:05:43.860 --> 00:05:46.620
the content by
clicking on the files.

110
00:05:53.370 --> 00:05:58.050
It even generated a nice
README file with instructions.

111
00:05:58.050 --> 00:06:02.650
Once you're ready, you can
click on Create workspace.

112
00:06:02.650 --> 00:06:05.010
Then you will select
a folder to save

113
00:06:05.010 --> 00:06:08.210
the new workspace and
open it a new window.

114
00:06:08.210 --> 00:06:10.510
Another command that you can use

115
00:06:10.510 --> 00:06:12.990
is the forward/new Notebook,

116
00:06:12.990 --> 00:06:14.790
which should generate you

117
00:06:14.790 --> 00:06:17.970
a new Jupiter notebook
based on your input.

118
00:06:17.970 --> 00:06:21.350
Another great command is
the forward slash test,

119
00:06:21.350 --> 00:06:23.930
and it generates
test cases either

120
00:06:23.930 --> 00:06:27.050
for the selected
text or active file.

121
00:06:27.050 --> 00:06:29.270
For example, if you just

122
00:06:29.270 --> 00:06:30.950
want to create a
quick unit test,

123
00:06:30.950 --> 00:06:32.930
this is a nice way of doing so.

124
00:06:32.930 --> 00:06:34.550
To clear the chat window,

125
00:06:34.550 --> 00:06:38.030
let's type forward slash
clear and hit Enter.

126
00:06:38.030 --> 00:06:40.010
That's it for this video

127
00:06:40.010 --> 00:06:42.730
and I'll see you
in the next one.